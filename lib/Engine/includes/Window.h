#ifndef __WINDOWS_H
#define __WINDOWS_H

#include <Windows.h>
#include <cstdio>

// HINSTANCE = HANDLE = INT32


typedef LRESULT (__stdcall *MSGCALLBACK) (HWND, UINT, WPARAM, LPARAM);

class Window {
public:
	Window(const HINSTANCE hInstance, int nCmdShow);
	~Window();

	bool initWindowClass(UINT style, LPCWSTR className);
	bool createWindow(LPCWSTR title, int x, int y, int width, int height);
	int run();

	HWND inline handle();

	static LRESULT __stdcall messageCallback(HWND hWindow, UINT message, WPARAM wParam, LPARAM lParam);

private:
	// handle to current instance passed in by WinMain
	// 32bit int auto generated by windows for identifying process object
	HINSTANCE m_hInstance;
	// window handle
	HWND m_hWindow;
	// information struct for window (cursor, background color ...)
	WNDCLASSEX m_windowClassEx;
	// holds window callback function holding the gameloop
	MSGCALLBACK m_windowCallBackFunction;
	// class name of the window
	LPCWSTR m_className;
	// controls how window has to be shown, passed in by WinMain
	int m_nCmdShow;

	LRESULT __stdcall messageCallbackInternal(HWND hWindow, UINT message, WPARAM wParam, LPARAM lParam);
};

#endif

